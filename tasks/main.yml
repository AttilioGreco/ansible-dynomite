---
- name: download sources
  get_url:
    url: "{{ dynomitedb_download_url }}"
    dest: /usr/local/src/dynomitedb-{{ dynomitedb_version }}.zip

- name: extract dynomitedb archive
  unarchive:
    src: /usr/local/src/dynomitedb-{{ dynomitedb_version }}.zip
    dest: /usr/local/src
    creates: /usr/local/src/dynomite-{{ dynomitedb_version }}/Makefile.am
    copy: no

- name: autoreconf dynomitedb
  command: autoreconf -fvi
  args:
    chdir: /usr/local/src/dynomite-{{ dynomitedb_version }}
    creates: /usr/local/src/dynomite-{{ dynomitedb_version }}/configure

- name: configure dynomitedb
  command: ./configure --enable-debug=log
  args:
    chdir: /usr/local/src/dynomite-{{ dynomitedb_version }}
    creates: /usr/local/src/dynomite-{{ dynomitedb_version }}/Makefile

- name: compile dynomitedb
  command: make
  args:
    chdir: /usr/local/src/dynomite-{{ dynomitedb_version }}
    creates: /usr/local/src/dynomite-{{ dynomitedb_version }}/src/dynomite

- name: create dynomitedb install directory
  file:
    path: "{{ dynomitedb_install_dir }}"
    state: directory

- name: Copy dynomitedb to install directory
  command: cp /usr/local/src/dynomite-{{ dynomitedb_version }}/src/dynomite {{ dynomitedb_install_dir }}
  args:
    creates: "{{ dynomitedb_install_dir }}/dynomite"

- name: add dynomitedb user
  user:
    name: "{{ dynomitedb_user }}"
    comment: "DynomiteDB"
    home: "{{ dynomitedb_install_dir }}"
    shell: /bin/false
    system: yes

- name: create /etc/dynomitedb
  file:
    path: /etc/dynomitedb
    state: directory

- name: create /var/run/dynomitedb
  file:
    path: /var/run/dynomitedb
    state: directory
    owner: "{{ dynomitedb_user }}"
